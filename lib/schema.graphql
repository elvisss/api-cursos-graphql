"Valida los tipos de nivel"
enum Level {
  principiante
  intermedio
  avanzado
}

type Course {
  _id: ID!
  title: String!
  description: String!
  teacher: String
  topic: String
  people: [Student]
  level: Level
}

interface Person {
  _id: ID!
  name: String!
  email: String!
}

type Student implements Person {
  _id: ID!
  name: String!
  email: String!
  avatar: String
}

type Monitor implements Person {
  _id: ID!
  name: String!
  email: String!
  phone: String
}

type Query {
  "Devuelve todos los cursos"
  getCourses: [Course]
  "Devuelve un curso"
  getCourse(id: ID!): Course
  "Devuelve todos los estudiantes"
  getPeople: [Person]
  "Devuelve un estudiante"
  getPerson(id: ID!): Person
}

input CourseInput {
  title: String!
  description: String!
  teacher: String
  topic: String
  level: Level
}

input CourseEditInput {
  title: String
  description: String
  teacher: String
  topic: String
}

input PersonInput {
  name: String!
  email: String!
  phone: String
  avatar: String
}

input PersonEditInput {
  name: String
  email: String
  phone: String
  avatar: String
}

type Mutation {
  "Crea un curso"
  createCourse(input: CourseInput!): Course
  "Editar un curso"
  editCourse(_id: ID!, input: CourseEditInput): Course
  "Eliminar un curso"
  deleteCourse(_id: ID): String

  "Crea un persona"
  createPerson(input: PersonInput!): Person
  "Editar un persona"
  editPerson(_id: ID!, input: PersonEditInput): Person
  "Eliminar un persona"
  deleteStudent(_id: ID): String
  "Agrega una persona a un curso"
  addPeople(courseID: ID!, personID: ID!): Course
}
